<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\stm32»ð»¨Ï¨Ãð\stm32»ð»¨Ï¨ÃðTEST1\Huohuaarm.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\stm32»ð»¨Ï¨Ãð\stm32»ð»¨Ï¨ÃðTEST1\Huohuaarm.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 567]: Last Updated: Wed Mar 29 15:55:28 2017
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ScreenDataRecv_Process &rArr; TextProcess &rArr; RTC_Display &rArr; itoa
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[4]">BusFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[7]">DebugMonitor</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2]">HardFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3]">MemManageException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1]">NMIException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[8]">PendSVC</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[48]">Reset_Handler</a> from stm32f10x_vector.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[6]">SVCHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[9]">SysTickHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[5]">UsageFaultException</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x_it.o(.text) referenced from stm32f10x_vector.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x_vector.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[126]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[48]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))

<P><STRONG><a name="[4b]"></a>RTC_Display</STRONG> (Thumb, 334 bytes, Stack size 112 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RTC_Display &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>NVIC_Configuration</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>EXTI_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>TIM2_Configuration</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_Configuration &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>USART_Configuration</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>GPIO_Configuration</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>RCC_Configuration</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; ScreenDataRecv_Process &rArr; TextProcess &rArr; RTC_Display &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenDataRecv_Process
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisScreen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[86]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[108]"></a>Delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_NoAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
</UL>

<P><STRONG><a name="[1]"></a>NMIException</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMIException
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM2_IRQHandler &rArr; Spark_test &rArr; Data_Save &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spark_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FSMC_SRAM_Init &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>FSMC_CPLD_Init</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FSMC_CPLD_Init &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>FSMC_SRAM_WriteStruct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_SRAM_WriteStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
</UL>

<P><STRONG><a name="[9c]"></a>FSMC_SRAM_ReadStruct</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once_Fault
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once_Disable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once
</UL>

<P><STRONG><a name="[127]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsmc_cpld_sram.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsmc_cpld_sram.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>FSMC_CPLD_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Spray
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>FSMC_CPLD_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsmc_cpld_sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>Data_Save</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spark_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Data_Save &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteStruct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spark_test
</UL>

<P><STRONG><a name="[9a]"></a>Water_Spray</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spark_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Water_Spray
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spark_test
</UL>

<P><STRONG><a name="[92]"></a>Spark_test</STRONG> (Thumb, 740 bytes, Stack size 8 bytes, spark_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Spark_test &rArr; Data_Save &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Spray
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>Data_Get_Once</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spark_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Data_Get_Once
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
</UL>

<P><STRONG><a name="[9d]"></a>Data_Get_All</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spark_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashNByte
</UL>

<P><STRONG><a name="[9e]"></a>ReadFlashNByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_operation.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_All
</UL>

<P><STRONG><a name="[129]"></a>ReadFlashStruct</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, flash_operation.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>WriteFlashOneWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flash_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[a5]"></a>WriteFlashStruct</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, flash_operation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[7b]"></a>RTC_Configuration</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtc_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Configuration &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>Set_Day_Time</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rtc_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_Day_Time &rArr; PCF8563_WriteAdress &rArr; PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[b1]"></a>Set_Second_Time</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rtc_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_Second_Time &rArr; PCF8563_WriteAdress &rArr; PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[4c]"></a>Get_Cur_Time</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Cur_Time &rArr; PCF8563_ReadTimes &rArr; PCF8563_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[b3]"></a>SendChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomShift
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurveData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurve
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurve
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControlFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlidervalue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidervalue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProgressValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextViewFocus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextView
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScreen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoClearLayer_en
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLayer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouchScreen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen_Adj
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommBps
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackLight
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PolygonFill
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EllipseFill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Ellipse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AreaInycolor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Circle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Dot
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCut_Image
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCursor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilterColor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont_Region
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextSpace
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorPicker
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandShake
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisScreen
</UL>

<P><STRONG><a name="[b4]"></a>SendStrings</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendStrings &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
</UL>

<P><STRONG><a name="[b5]"></a>SendBeginCMD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendBeginCMD &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomShift
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurveData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurve
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurve
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControlFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlidervalue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidervalue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProgressValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextViewFocus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextView
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScreen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoClearLayer_en
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLayer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouchScreen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen_Adj
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommBps
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackLight
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PolygonFill
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EllipseFill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Ellipse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AreaInycolor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Circle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Dot
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCut_Image
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCursor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilterColor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont_Region
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextSpace
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorPicker
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandShake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisScreen
</UL>

<P><STRONG><a name="[b6]"></a>SendEndCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZoomShift
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurveData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurveData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelCurve
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCurve
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControlFrame
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnimationControl
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterValue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlidervalue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSlidervalue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProgressValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgressValue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextViewFocus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextView
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetButtonStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetButtonStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScreen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoClearLayer_en
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLayer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTouchScreen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen_Adj
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommBps
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzer
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBackLight
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PolygonFill
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EllipseFill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Ellipse
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AreaInycolor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Arc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Circle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ConDots
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Dot
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFlashImage
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCut_Image
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisFull_Image
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisCursor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilterColor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFont_Region
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextSpace
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CleanScreen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorPicker
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBcolor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHandShake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisScreen
</UL>

<P><STRONG><a name="[b7]"></a>SetHandShake</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[b8]"></a>SetFcolor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetFcolor &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_Init
</UL>

<P><STRONG><a name="[b9]"></a>SetBcolor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ba]"></a>ColorPicker</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[bb]"></a>GUI_CleanScreen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[bc]"></a>SetTextSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[bd]"></a>SetFont_Region</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[be]"></a>SetFilterColor</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[bf]"></a>DisText</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisText &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_Init
</UL>

<P><STRONG><a name="[c0]"></a>DisData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c1]"></a>DisCursor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c2]"></a>DisFull_Image</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c3]"></a>DisArea_Image</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisArea_Image &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[c4]"></a>DisCut_Image</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c5]"></a>DisFlashImage</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c6]"></a>GUI_Dot</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c7]"></a>GUI_Line</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Line &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
</UL>

<P><STRONG><a name="[c8]"></a>GUI_ConDots</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStrings
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[c9]"></a>GUI_Circle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ca]"></a>GUI_CircleFill</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_CircleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[cb]"></a>GUI_Arc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[cc]"></a>GUI_Rectangle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Rectangle &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
</UL>

<P><STRONG><a name="[cd]"></a>GUI_RectangleFill</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[ce]"></a>GUI_AreaInycolor</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[cf]"></a>GUI_Ellipse</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d0]"></a>GUI_EllipseFill</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d1]"></a>GUI_PolygonFill</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d2]"></a>SetBackLight</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d3]"></a>SetBuzzer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d4]"></a>SetCommBps</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[82]"></a>SetTouchScreen</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetTouchScreen &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>SetTouchScreen_Adj</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d6]"></a>TestTouchScreen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[d7]"></a>WriteLayer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteLayer &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[d8]"></a>DisplyLayer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DisplyLayer &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[d9]"></a>CopyLayer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CopyLayer &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[da]"></a>ClearLayer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[db]"></a>AutoClearLayer_en</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[7d]"></a>DisScreen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DisScreen &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>GetScreen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[dd]"></a>SetButtonStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[de]"></a>GetButtonStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[50]"></a>SetTextView</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTextView &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[df]"></a>GetTextView</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e0]"></a>SetTextViewFocus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e1]"></a>SetProgressValue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e2]"></a>GetProgressValue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e3]"></a>SetSlidervalue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e4]"></a>GetSlidervalue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e5]"></a>SetMeterValue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e6]"></a>GetMeterValue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e7]"></a>AnimationControl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e8]"></a>AnimationControlFrame</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e9]"></a>AddCurve</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ea]"></a>DelCurve</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[eb]"></a>AddCurveData</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ec]"></a>DelCurveData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ed]"></a>ZoomShift</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ee]"></a>DisTime</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[ef]"></a>SetTime</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[f0]"></a>ReadTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEndCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeginCMD
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[fa]"></a>itoaT</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = itoaT
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[f1]"></a>TextProcess</STRONG> (Thumb, 2558 bytes, Stack size 168 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TextProcess &rArr; RTC_Display &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Second_Time
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Day_Time
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenDataRecv_Process
</UL>

<P><STRONG><a name="[fd]"></a>itoaF</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = itoaF
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
</UL>

<P><STRONG><a name="[4e]"></a>itoaD</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, functions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[fb]"></a>Fault_Display_A</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Fault_Display_A &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once_Fault
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
</UL>

<P><STRONG><a name="[fe]"></a>Alarm_Display_B</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Alarm_Display_B &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
</UL>

<P><STRONG><a name="[ff]"></a>Alarm_Display_A</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Alarm_Display_A &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
</UL>

<P><STRONG><a name="[4d]"></a>itoa</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[100]"></a>Disable_Display_A</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disable_Display_A &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once_Disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaF
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
</UL>

<P><STRONG><a name="[102]"></a>ButtonProcess</STRONG> (Thumb, 18228 bytes, Stack size 48 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ButtonProcess &rArr; Disable_Display_A &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Line
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Get_Once
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaD
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTouchScreen
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenDataRecv_Process
</UL>

<P><STRONG><a name="[105]"></a>MemCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenDataRecv_Process
</UL>

<P><STRONG><a name="[85]"></a>ScreenDataRecv_Process</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ScreenDataRecv_Process &rArr; TextProcess &rArr; RTC_Display &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemCopy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Power_on_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Power_on_Init &rArr; DisText &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Power_on_self_Test</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Power_on_self_Test &rArr; Data_Save_Fault &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>ScreenInit</STRONG> (Thumb, 652 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ScreenInit &rArr; _24C08_I2C_PageWrite &rArr; _24C08_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>Screen_update</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Screen_update &rArr; Alarm_Display_A &rArr; GUI_RectangleFill &rArr; SendEndCmd &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoaT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyLayer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplyLayer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLayer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectangleFill
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Rectangle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CircleFill
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisArea_Image
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisText
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFcolor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTextView
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>MemSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, functions.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>PCF8563_I2C_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCF8563_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[10a]"></a>PCF8563_I2C_WaitAck</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCF8563_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[10c]"></a>PCF8563_I2C_WriteByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[10d]"></a>PCF8563_I2C_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCF8563_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[b0]"></a>PCF8563_WriteAdress</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PCF8563_WriteAdress &rArr; PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Times
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Second_Time
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Day_Time
</UL>

<P><STRONG><a name="[10e]"></a>PCF8563_Set_Times</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCF8563_Set_Times &rArr; PCF8563_WriteAdress &rArr; PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_WriteAdress
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
</UL>

<P><STRONG><a name="[10f]"></a>PCF8563_I2C_ReadByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCF8563_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[110]"></a>PCF8563_ReadAdress</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PCF8563_ReadAdress &rArr; PCF8563_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
</UL>

<P><STRONG><a name="[79]"></a>PCF8563_I2C_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCF8563_I2C_Init &rArr; PCF8563_Set_Times &rArr; PCF8563_WriteAdress &rArr; PCF8563_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadAdress
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Times
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>PCF8563_I2C_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCF8563_I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[112]"></a>PCF8563_I2C_NoAck</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCF8563_I2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_ReadTimes
</UL>

<P><STRONG><a name="[b2]"></a>PCF8563_ReadTimes</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, pcf8563_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCF8563_ReadTimes &rArr; PCF8563_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_NoAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
</UL>

<P><STRONG><a name="[7a]"></a>_24C08_I2C_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _24C08_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>_24C08_I2C_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _24C08_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
</UL>

<P><STRONG><a name="[114]"></a>_24C08_I2C_WaitAck</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _24C08_I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
</UL>

<P><STRONG><a name="[115]"></a>_24C08_I2C_WriteByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _24C08_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
</UL>

<P><STRONG><a name="[116]"></a>_24C08_I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _24C08_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_PageWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
</UL>

<P><STRONG><a name="[7f]"></a>_24C08_I2C_HalfwordWrite</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _24C08_I2C_HalfwordWrite &rArr; _24C08_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>_24C08_I2C_NoAck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _24C08_I2C_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
</UL>

<P><STRONG><a name="[118]"></a>_24C08_I2C_ReadByte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ByteRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
</UL>

<P><STRONG><a name="[119]"></a>_24C08_I2C_Ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _24C08_I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_BufferRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
</UL>

<P><STRONG><a name="[93]"></a>_24C08_I2C_HalfwordRead</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Fault
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save_Disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Save
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>_24C08_I2C_ByteWrite</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _24C08_I2C_ByteWrite &rArr; _24C08_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[f2]"></a>_24C08_I2C_ByteRead</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _24C08_I2C_ByteRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[f9]"></a>_24C08_I2C_PageWrite</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _24C08_I2C_PageWrite &rArr; _24C08_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
</UL>

<P><STRONG><a name="[f3]"></a>_24C08_I2C_BufferRead</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 24c08_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _24C08_I2C_BufferRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[103]"></a>Data_Save_Fault</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fault_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Data_Save_Fault &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteStruct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
</UL>

<P><STRONG><a name="[fc]"></a>Data_Get_Once_Fault</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fault_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Data_Get_Once_Fault
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
</UL>

<P><STRONG><a name="[104]"></a>Data_Save_Disable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, disable_test .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Data_Save_Disable &rArr; _24C08_I2C_HalfwordRead &rArr; _24C08_I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteStruct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_HalfwordWrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cur_Time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
</UL>

<P><STRONG><a name="[101]"></a>Data_Get_Once_Disable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, disable_test .o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Data_Get_Once_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4f]"></a>strcat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Display_A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_A
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Display_B
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Display_A
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Display
</UL>

<P><STRONG><a name="[f7]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[f4]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[f6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextProcess
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashStruct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashOneWord
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashStruct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashOneWord
</UL>

<P><STRONG><a name="[11f]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a4]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashStruct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashOneWord
</UL>

<P><STRONG><a name="[6c]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a6]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashStruct
</UL>

<P><STRONG><a name="[a3]"></a>FLASH_ProgramWord</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashOneWord
</UL>

<P><STRONG><a name="[6b]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashStruct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashOneWord
</UL>

<P><STRONG><a name="[11e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[97]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Init
</UL>

<P><STRONG><a name="[96]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Init
</UL>

<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
</UL>

<P><STRONG><a name="[107]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_NoAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
</UL>

<P><STRONG><a name="[109]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_ReadByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_NoAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WriteByte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_WaitAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_NoAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_ReadByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_WaitAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
</UL>

<P><STRONG><a name="[54]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[53]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[52]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a7]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[74]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[73]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[122]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[72]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_24C08_I2C_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_I2C_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_CPLD_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[123]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[11d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[8b]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>

<P><STRONG><a name="[65]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[124]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>

<P><STRONG><a name="[71]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[68]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[66]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>

<P><STRONG><a name="[8a]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIException
</UL>

<P><STRONG><a name="[a9]"></a>RCC_LSEConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[69]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ab]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[70]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[121]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[8c]"></a>RTC_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>RTC_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[5a]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[59]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[90]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonProcess
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_on_self_Test
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[56]"></a>TIM_DeInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[57]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_InternalClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[58]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[75]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[61]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[88]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[94]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[5f]"></a>USART_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[95]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[134]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
