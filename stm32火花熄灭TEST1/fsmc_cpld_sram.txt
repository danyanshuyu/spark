; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --debug -c --asm --interleave -ofsmc_cpld_sram.o --asm_dir=.\ --list_dir=.\ --depend=fsmc_cpld_sram.d --cpu=Cortex-M3 --apcs=interwork -O0 -I"E:\Program Files\Keil4\ARM\INC" -I"E:\Program Files\Keil4\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=fsmc_cpld_sram.crf User\fsmc_cpld_sram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_CPLD_SRAM_Init PROC
;;;17     *******************************************************************************/
;;;18     void FSMC_CPLD_SRAM_Init(void)
000000  b500              PUSH     {lr}
;;;19     {
000002  b097              SUB      sp,sp,#0x5c
;;;20     	FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
;;;21     	FSMC_NORSRAMTimingInitTypeDef p;
;;;22     	GPIO_InitTypeDef GPIO_InitStructure;
;;;23     
;;;24       	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOG | 
000004  2101              MOVS     r1,#1
000006  f44f70f4          MOV      r0,#0x1e8
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;25     	 				RCC_APB2Periph_GPIOE | RCC_APB2Periph_GPIOF, ENABLE);
;;;26     	
;;;27     	//SRAM数据线
;;;28     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
00000e  f24c7003          MOV      r0,#0xc703
000012  f8ad0000          STRH     r0,[sp,#0]
;;;29     	                            GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;30     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000016  2018              MOVS     r0,#0x18
000018  f88d0003          STRB     r0,[sp,#3]
;;;31     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0002          STRB     r0,[sp,#2]
;;;32     	GPIO_Init(GPIOD, &GPIO_InitStructure); 
000022  4669              MOV      r1,sp
000024  483e              LDR      r0,|L1.288|
000026  f7fffffe          BL       GPIO_Init
;;;33     	
;;;34     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
00002a  f64f7080          MOV      r0,#0xff80
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;35     	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;36     	                            GPIO_Pin_15;
;;;37     	GPIO_Init(GPIOE, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  483b              LDR      r0,|L1.292|
000036  f7fffffe          BL       GPIO_Init
;;;38     
;;;39     	//SRAM地址线
;;;40     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
00003a  f24f003f          MOV      r0,#0xf03f
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;41     	                            GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
;;;42     	                            GPIO_Pin_14 | GPIO_Pin_15;
;;;43     	GPIO_Init(GPIOF, &GPIO_InitStructure);
000042  4669              MOV      r1,sp
000044  4838              LDR      r0,|L1.296|
000046  f7fffffe          BL       GPIO_Init
;;;44     	
;;;45     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
00004a  203f              MOVS     r0,#0x3f
00004c  f8ad0000          STRH     r0,[sp,#0]
;;;46     	                            GPIO_Pin_4 | GPIO_Pin_5;
;;;47     	GPIO_Init(GPIOG, &GPIO_InitStructure);
000050  4669              MOV      r1,sp
000052  4836              LDR      r0,|L1.300|
000054  f7fffffe          BL       GPIO_Init
;;;48     	
;;;49     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
000058  f44f5060          MOV      r0,#0x3800
00005c  f8ad0000          STRH     r0,[sp,#0]
;;;50     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000060  4669              MOV      r1,sp
000062  482f              LDR      r0,|L1.288|
000064  f7fffffe          BL       GPIO_Init
;;;51     
;;;52     
;;;53     
;;;54     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 |
000068  207c              MOVS     r0,#0x7c
00006a  f8ad0000          STRH     r0,[sp,#0]
;;;55     	                            GPIO_Pin_6;
;;;56     	GPIO_Init(GPIOE, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  482c              LDR      r0,|L1.292|
000072  f7fffffe          BL       GPIO_Init
;;;57     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14; 
000076  f44f40c0          MOV      r0,#0x6000
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;58     	GPIO_Init(GPIOG, &GPIO_InitStructure);
00007e  4669              MOV      r1,sp
000080  482a              LDR      r0,|L1.300|
000082  f7fffffe          BL       GPIO_Init
;;;59     	
;;;60     
;;;61     	//公共信号线
;;;62     	/* NOE and NWE configuration 读写使能信号线*/  
;;;63     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
000086  2030              MOVS     r0,#0x30
000088  f8ad0000          STRH     r0,[sp,#0]
;;;64     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00008c  4669              MOV      r1,sp
00008e  4824              LDR      r0,|L1.288|
000090  f7fffffe          BL       GPIO_Init
;;;65     	
;;;66     	/* NE3 configuration  片选区域信号线*/
;;;67     	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
;;;68     	//GPIO_Init(GPIOG, &GPIO_InitStructure);
;;;69     
;;;70     	//NE1
;;;71     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
000094  2080              MOVS     r0,#0x80
000096  f8ad0000          STRH     r0,[sp,#0]
;;;72     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00009a  4669              MOV      r1,sp
00009c  4820              LDR      r0,|L1.288|
00009e  f7fffffe          BL       GPIO_Init
;;;73     
;;;74     	
;;;75     	/* NBL0, NBL1 configuration */
;;;76     	//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
;;;77     	//GPIO_Init(GPIOE, &GPIO_InitStructure); 
;;;78     
;;;79     
;;;80     	//FSMC配置
;;;81     	p.FSMC_AddressSetupTime = 0;  //地址建立时间，为个HCLK（0-15）,
0000a2  2000              MOVS     r0,#0
0000a4  9001              STR      r0,[sp,#4]
;;;82     	p.FSMC_AddressHoldTime = 0;   
0000a6  9002              STR      r0,[sp,#8]
;;;83     	p.FSMC_DataSetupTime = 2;	  //数据保持时间，一个HCLK为13.8ns(1/72MHz),
0000a8  2002              MOVS     r0,#2
0000aa  9003              STR      r0,[sp,#0xc]
;;;84     	p.FSMC_BusTurnAroundDuration = 0;
0000ac  2000              MOVS     r0,#0
0000ae  9004              STR      r0,[sp,#0x10]
;;;85     	p.FSMC_CLKDivision = 0;
0000b0  9005              STR      r0,[sp,#0x14]
;;;86     	p.FSMC_DataLatency = 0;
0000b2  9006              STR      r0,[sp,#0x18]
;;;87     	p.FSMC_AccessMode = FSMC_AccessMode_A;	//访问模式，模式A
0000b4  9007              STR      r0,[sp,#0x1c]
;;;88     
;;;89     	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;				    //使用哪个存储块
0000b6  9008              STR      r0,[sp,#0x20]
;;;90     	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
0000b8  9009              STR      r0,[sp,#0x24]
;;;91     	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;			//存储器类型，表示SRAM
0000ba  900a              STR      r0,[sp,#0x28]
;;;92     	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;  //存储器数据总线宽度 16位
0000bc  2010              MOVS     r0,#0x10
0000be  900b              STR      r0,[sp,#0x2c]
;;;93     	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;//禁止突发访问模式
0000c0  2000              MOVS     r0,#0
0000c2  900c              STR      r0,[sp,#0x30]
;;;94     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0000c4  900d              STR      r0,[sp,#0x34]
;;;95     	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
0000c6  900e              STR      r0,[sp,#0x38]
;;;96     	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
0000c8  900f              STR      r0,[sp,#0x3c]
;;;97     	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;//写使能
0000ca  f44f5080          MOV      r0,#0x1000
0000ce  9010              STR      r0,[sp,#0x40]
;;;98     	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
0000d0  2000              MOVS     r0,#0
0000d2  9011              STR      r0,[sp,#0x44]
;;;99     	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;   //扩展模式使能位，是否允许读、写不同的时序
0000d4  9012              STR      r0,[sp,#0x48]
;;;100    	FSMC_NORSRAMInitStructure.FSMC_AsyncWait = FSMC_AsyncWait_Disable;
0000d6  9013              STR      r0,[sp,#0x4c]
;;;101    	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0000d8  9014              STR      r0,[sp,#0x50]
;;;102    	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
0000da  a801              ADD      r0,sp,#4
0000dc  9015              STR      r0,[sp,#0x54]
;;;103    	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
0000de  9016              STR      r0,[sp,#0x58]
;;;104    	
;;;105    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
0000e0  a808              ADD      r0,sp,#0x20
0000e2  f7fffffe          BL       FSMC_NORSRAMInit
;;;106    	
;;;107    	//使能FSMC Bank1_SRAM Bank 
;;;108    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);  		//存储块使能
0000e6  2101              MOVS     r1,#1
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       FSMC_NORSRAMCmd
;;;109    }
0000ee  b017              ADD      sp,sp,#0x5c
0000f0  bd00              POP      {pc}
;;;110    
                          ENDP

                  FSMC_CPLD_SRAM_WriteBuffer PROC
;;;122    *******************************************************************************/
;;;123    void FSMC_CPLD_SRAM_WriteBuffer(u16* pBuffer, u32 WriteAddr, u32 NumHalfwordToWrite)
0000f2  b510              PUSH     {r4,lr}
;;;124    {
;;;125      for(; NumHalfwordToWrite != 0; NumHalfwordToWrite--) /* while there is data to write */
0000f4  e006              B        |L1.260|
                  |L1.246|
;;;126      {
;;;127        /* Transfer data to the memory */
;;;128        *(u16 *) (Bank1_SRAM3_ADDR + WriteAddr) = *pBuffer++;
0000f6  f8304b02          LDRH     r4,[r0],#2
0000fa  f04f43c0          MOV      r3,#0x60000000
0000fe  525c              STRH     r4,[r3,r1]
;;;129        
;;;130        /* Increment the address*/  
;;;131        WriteAddr += 2;
000100  1c89              ADDS     r1,r1,#2
000102  1e52              SUBS     r2,r2,#1              ;125
                  |L1.260|
000104  2a00              CMP      r2,#0                 ;125
000106  d1f6              BNE      |L1.246|
;;;132      }   
;;;133    }
000108  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  FSMC_CPLD_SRAM_ReadBuffer PROC
;;;145    *******************************************************************************/
;;;146    void FSMC_CPLD_SRAM_ReadBuffer(u16* pBuffer, u32 ReadAddr, u32 NumHalfwordToRead)
00010a  e006              B        |L1.282|
                  |L1.268|
;;;147    {
;;;148      for(; NumHalfwordToRead != 0; NumHalfwordToRead--) /* while there is data to read */
;;;149      {
;;;150        /* Read a half-word from the memory */
;;;151        *pBuffer++ = *(vu16*) (Bank1_SRAM3_ADDR + ReadAddr);
00010c  f04f43c0          MOV      r3,#0x60000000
000110  5a5b              LDRH     r3,[r3,r1]
000112  f8203b02          STRH     r3,[r0],#2
;;;152    
;;;153        /* Increment the address*/  
;;;154        ReadAddr += 2;
000116  1c89              ADDS     r1,r1,#2
000118  1e52              SUBS     r2,r2,#1              ;148
                  |L1.282|
00011a  2a00              CMP      r2,#0                 ;148
00011c  d1f6              BNE      |L1.268|
;;;155      }  
;;;156    }
00011e  4770              BX       lr
;;;157    
                          ENDP

                  |L1.288|
                          DCD      0x40011400
                  |L1.292|
                          DCD      0x40011800
                  |L1.296|
                          DCD      0x40011c00
                  |L1.300|
                          DCD      0x40012000
