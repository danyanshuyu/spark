; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --debug -c --asm --interleave -ostm32f10x_it.o --asm_dir=.\ --list_dir=.\ --depend=stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I"E:\Program Files\Keil4\ARM\INC" -I"E:\Program Files\Keil4\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=stm32f10x_it.crf User\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMIException PROC
;;;42     *******************************************************************************/
;;;43     void NMIException(void)
000000  b510              PUSH     {r4,lr}
;;;44     {
;;;45       /* This interrupt is generated when HSE clock fails */
;;;46     
;;;47       if (RCC_GetITStatus(RCC_IT_CSS) != RESET)
000002  2080              MOVS     r0,#0x80
000004  f7fffffe          BL       RCC_GetITStatus
000008  b170              CBZ      r0,|L1.40|
;;;48       {/* At this stage: HSE, PLL are disabled (but no change on PLL config) and HSI
;;;49            is selected as system clock source */
;;;50     
;;;51         /* Enable HSE */
;;;52         RCC_HSEConfig(RCC_HSE_ON);
00000a  f44f3080          MOV      r0,#0x10000
00000e  f7fffffe          BL       RCC_HSEConfig
;;;53     
;;;54         /* Enable HSE Ready interrupt */
;;;55         RCC_ITConfig(RCC_IT_HSERDY, ENABLE);
000012  2101              MOVS     r1,#1
000014  2008              MOVS     r0,#8
000016  f7fffffe          BL       RCC_ITConfig
;;;56     
;;;57     #ifndef SYSCLK_HSE
;;;58         /* Enable PLL Ready interrupt */
;;;59         RCC_ITConfig(RCC_IT_PLLRDY, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       RCC_ITConfig
;;;60     #endif 
;;;61     
;;;62         /* Clear Clock Security System interrupt pending bit */
;;;63         RCC_ClearITPendingBit(RCC_IT_CSS);
000022  2080              MOVS     r0,#0x80
000024  f7fffffe          BL       RCC_ClearITPendingBit
                  |L1.40|
;;;64     
;;;65         /* Once HSE clock recover, the HSERDY interrupt is generated and in the RCC ISR
;;;66            routine the system clock will be reconfigured to its previous state (before
;;;67            HSE clock failure) */
;;;68       }
;;;69     }
000028  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  HardFaultException PROC
;;;77     *******************************************************************************/
;;;78     void HardFaultException(void)
00002a  bf00              NOP      
                  |L1.44|
;;;79     {
;;;80       /* Go to infinite loop when Hard Fault exception occurs */
;;;81       while (1)
00002c  e7fe              B        |L1.44|
;;;82       {
;;;83       }
;;;84     }
;;;85     
                          ENDP

                  MemManageException PROC
;;;92     *******************************************************************************/
;;;93     void MemManageException(void)
00002e  bf00              NOP      
                  |L1.48|
;;;94     {
;;;95       /* Go to infinite loop when Memory Manage exception occurs */
;;;96       while (1)
000030  e7fe              B        |L1.48|
;;;97       {
;;;98       }
;;;99     }
;;;100    
                          ENDP

                  BusFaultException PROC
;;;107    *******************************************************************************/
;;;108    void BusFaultException(void)
000032  bf00              NOP      
                  |L1.52|
;;;109    {
;;;110      /* Go to infinite loop when Bus Fault exception occurs */
;;;111      while (1)
000034  e7fe              B        |L1.52|
;;;112      {
;;;113      }
;;;114    }
;;;115    
                          ENDP

                  UsageFaultException PROC
;;;122    *******************************************************************************/
;;;123    void UsageFaultException(void)
000036  bf00              NOP      
                  |L1.56|
;;;124    {
;;;125      /* Go to infinite loop when Usage Fault exception occurs */
;;;126      while (1)
000038  e7fe              B        |L1.56|
;;;127      {
;;;128      }
;;;129    }
;;;130    
                          ENDP

                  DebugMonitor PROC
;;;137    *******************************************************************************/
;;;138    void DebugMonitor(void)
00003a  4770              BX       lr
;;;139    {
;;;140    }
;;;141    
                          ENDP

                  SVCHandler PROC
;;;148    *******************************************************************************/
;;;149    void SVCHandler(void)
00003c  4770              BX       lr
;;;150    {
;;;151    }
;;;152    
                          ENDP

                  PendSVC PROC
;;;159    *******************************************************************************/
;;;160    void PendSVC(void)
00003e  4770              BX       lr
;;;161    {
;;;162    }
;;;163    
                          ENDP

                  SysTickHandler PROC
;;;170    *******************************************************************************/
;;;171    void SysTickHandler(void)
000040  4770              BX       lr
;;;172    {
;;;173    }
;;;174    
                          ENDP

                  WWDG_IRQHandler PROC
;;;181    *******************************************************************************/
;;;182    void WWDG_IRQHandler(void)
000042  4770              BX       lr
;;;183    {
;;;184    }
;;;185    
                          ENDP

                  PVD_IRQHandler PROC
;;;192    *******************************************************************************/
;;;193    void PVD_IRQHandler(void)
000044  4770              BX       lr
;;;194    {
;;;195    }
;;;196    
                          ENDP

                  TAMPER_IRQHandler PROC
;;;203    *******************************************************************************/
;;;204    void TAMPER_IRQHandler(void)
000046  4770              BX       lr
;;;205    {
;;;206    }
;;;207    
                          ENDP

                  RTC_IRQHandler PROC
;;;214    *******************************************************************************/
;;;215    void RTC_IRQHandler(void)
000048  b510              PUSH     {r4,lr}
;;;216    {
;;;217    	if (RTC_GetITStatus(RTC_IT_SEC) != RESET)//检查RTC秒中断是否发生
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       RTC_GetITStatus
000050  b188              CBZ      r0,|L1.118|
;;;218    	{	
;;;219    		RTC_ClearITPendingBit(RTC_IT_SEC); //Clear the RTC Second interrupt 
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       RTC_ClearITPendingBit
;;;220    				
;;;221    		TimeDisplay = 1;//时钟更新位置1
000058  2001              MOVS     r0,#1
00005a  494c              LDR      r1,|L1.396|
00005c  7008              STRB     r0,[r1,#0]
;;;222    		
;;;223    		RTC_WaitForLastTask();//Wait until last write operation on RTC registers has finished 
00005e  f7fffffe          BL       RTC_WaitForLastTask
;;;224    		
;;;225    		if (RTC_GetCounter() == 0x00015180)	//Reset RTC Counter when Time is 23:59:59 
000062  f7fffffe          BL       RTC_GetCounter
000066  494a              LDR      r1,|L1.400|
000068  4288              CMP      r0,r1
00006a  d104              BNE      |L1.118|
;;;226    		{
;;;227    			RTC_SetCounter(0x0);		
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       RTC_SetCounter
;;;228    			RTC_WaitForLastTask();          //Wait until last write operation on RTC registers has finished
000072  f7fffffe          BL       RTC_WaitForLastTask
                  |L1.118|
;;;229    		}
;;;230    	}
;;;231    }
000076  bd10              POP      {r4,pc}
;;;232    
                          ENDP

                  FLASH_IRQHandler PROC
;;;239    *******************************************************************************/
;;;240    void FLASH_IRQHandler(void)
000078  4770              BX       lr
;;;241    {
;;;242    	
;;;243    }
;;;244    
                          ENDP

                  RCC_IRQHandler PROC
;;;251    *******************************************************************************/
;;;252    void RCC_IRQHandler(void)
00007a  b510              PUSH     {r4,lr}
;;;253    {
;;;254      if(RCC_GetITStatus(RCC_IT_HSERDY) != RESET)
00007c  2008              MOVS     r0,#8
00007e  f7fffffe          BL       RCC_GetITStatus
000082  b148              CBZ      r0,|L1.152|
;;;255      { 
;;;256        /* Clear HSERDY interrupt pending bit */
;;;257        RCC_ClearITPendingBit(RCC_IT_HSERDY);
000084  2008              MOVS     r0,#8
000086  f7fffffe          BL       RCC_ClearITPendingBit
;;;258    
;;;259        /* Check if the HSE clock is still available */
;;;260        if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
00008a  2031              MOVS     r0,#0x31
00008c  f7fffffe          BL       RCC_GetFlagStatus
000090  b110              CBZ      r0,|L1.152|
;;;261        { 
;;;262    #ifdef SYSCLK_HSE
;;;263          /* Select HSE as system clock source */
;;;264          RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
;;;265    #else
;;;266          /* Enable PLL: once the PLL is ready the PLLRDY interrupt is generated */ 
;;;267          RCC_PLLCmd(ENABLE);
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       RCC_PLLCmd
                  |L1.152|
;;;268    #endif      
;;;269        }
;;;270      }
;;;271    
;;;272      if(RCC_GetITStatus(RCC_IT_PLLRDY) != RESET)
000098  2010              MOVS     r0,#0x10
00009a  f7fffffe          BL       RCC_GetITStatus
00009e  b148              CBZ      r0,|L1.180|
;;;273      { 
;;;274        /* Clear PLLRDY interrupt pending bit */
;;;275        RCC_ClearITPendingBit(RCC_IT_PLLRDY);
0000a0  2010              MOVS     r0,#0x10
0000a2  f7fffffe          BL       RCC_ClearITPendingBit
;;;276    
;;;277        /* Check if the PLL is still locked */
;;;278        if (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) != RESET)
0000a6  2039              MOVS     r0,#0x39
0000a8  f7fffffe          BL       RCC_GetFlagStatus
0000ac  b110              CBZ      r0,|L1.180|
;;;279        { 
;;;280            /* Select PLL as system clock source */
;;;281    		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       RCC_SYSCLKConfig
                  |L1.180|
;;;282        }
;;;283      }
;;;284    }
0000b4  bd10              POP      {r4,pc}
;;;285    
                          ENDP

                  EXTI0_IRQHandler PROC
;;;292    *******************************************************************************/
;;;293    void EXTI0_IRQHandler(void)			
0000b6  4837              LDR      r0,|L1.404|
;;;294    {
;;;295    	//火花计数
;;;296    	Single_num++;
0000b8  6800              LDR      r0,[r0,#0]  ; Single_num
0000ba  1c40              ADDS     r0,r0,#1
0000bc  4935              LDR      r1,|L1.404|
0000be  6008              STR      r0,[r1,#0]  ; Single_num
;;;297    }
0000c0  4770              BX       lr
;;;298    
                          ENDP

                  EXTI1_IRQHandler PROC
;;;305    *******************************************************************************/
;;;306    void EXTI1_IRQHandler(void)
0000c2  4770              BX       lr
;;;307    {
;;;308    	//Test_Cnt++;
;;;309    }
;;;310    
                          ENDP

                  EXTI2_IRQHandler PROC
;;;317    *******************************************************************************/
;;;318    void EXTI2_IRQHandler(void)
0000c4  4770              BX       lr
;;;319    {
;;;320    }
;;;321    
                          ENDP

                  EXTI3_IRQHandler PROC
;;;328    *******************************************************************************/
;;;329    void EXTI3_IRQHandler(void)
0000c6  4770              BX       lr
;;;330    {
;;;331    }
;;;332    
                          ENDP

                  EXTI4_IRQHandler PROC
;;;339    *******************************************************************************/
;;;340    void EXTI4_IRQHandler(void)
0000c8  4770              BX       lr
;;;341    {
;;;342    }
;;;343    
                          ENDP

                  DMA1_Channel1_IRQHandler PROC
;;;350    *******************************************************************************/
;;;351    void DMA1_Channel1_IRQHandler(void)
0000ca  4770              BX       lr
;;;352    {
;;;353    }
;;;354    
                          ENDP

                  DMA1_Channel2_IRQHandler PROC
;;;361    *******************************************************************************/
;;;362    void DMA1_Channel2_IRQHandler(void)
0000cc  4770              BX       lr
;;;363    {
;;;364    }
;;;365    
                          ENDP

                  DMA1_Channel3_IRQHandler PROC
;;;372    *******************************************************************************/
;;;373    void DMA1_Channel3_IRQHandler(void)
0000ce  4770              BX       lr
;;;374    {
;;;375    }
;;;376    
                          ENDP

                  DMA1_Channel4_IRQHandler PROC
;;;383    *******************************************************************************/
;;;384    void DMA1_Channel4_IRQHandler(void)
0000d0  4770              BX       lr
;;;385    {
;;;386    }
;;;387    
                          ENDP

                  DMA1_Channel5_IRQHandler PROC
;;;394    *******************************************************************************/
;;;395    void DMA1_Channel5_IRQHandler(void)
0000d2  4770              BX       lr
;;;396    {
;;;397    }
;;;398    
                          ENDP

                  DMA1_Channel6_IRQHandler PROC
;;;405    *******************************************************************************/
;;;406    void DMA1_Channel6_IRQHandler(void)
0000d4  4770              BX       lr
;;;407    {
;;;408    }
;;;409    
                          ENDP

                  DMA1_Channel7_IRQHandler PROC
;;;416    *******************************************************************************/
;;;417    void DMA1_Channel7_IRQHandler(void)
0000d6  4770              BX       lr
;;;418    {
;;;419    }
;;;420    
                          ENDP

                  ADC1_2_IRQHandler PROC
;;;427    *******************************************************************************/
;;;428    void ADC1_2_IRQHandler(void)
0000d8  4770              BX       lr
;;;429    {
;;;430    }
;;;431    
                          ENDP

                  USB_HP_CAN_TX_IRQHandler PROC
;;;439    *******************************************************************************/
;;;440    void USB_HP_CAN_TX_IRQHandler(void)
0000da  4770              BX       lr
;;;441    {
;;;442    }
;;;443    
                          ENDP

                  USB_LP_CAN_RX0_IRQHandler PROC
;;;451    *******************************************************************************/
;;;452    void USB_LP_CAN_RX0_IRQHandler(void)
0000dc  4770              BX       lr
;;;453    {
;;;454    }
;;;455    
                          ENDP

                  CAN_RX1_IRQHandler PROC
;;;462    *******************************************************************************/
;;;463    void CAN_RX1_IRQHandler(void)
0000de  4770              BX       lr
;;;464    {
;;;465    }
;;;466    
                          ENDP

                  CAN_SCE_IRQHandler PROC
;;;473    *******************************************************************************/
;;;474    void CAN_SCE_IRQHandler(void)
0000e0  4770              BX       lr
;;;475    {
;;;476    }
;;;477    
                          ENDP

                  EXTI9_5_IRQHandler PROC
;;;484    *******************************************************************************/
;;;485    void EXTI9_5_IRQHandler(void)
0000e2  4770              BX       lr
;;;486    {
;;;487    }
;;;488    
                          ENDP

                  TIM1_BRK_IRQHandler PROC
;;;495    *******************************************************************************/
;;;496    void TIM1_BRK_IRQHandler(void)
0000e4  4770              BX       lr
;;;497    {
;;;498    }
;;;499    
                          ENDP

                  TIM1_UP_IRQHandler PROC
;;;507    *******************************************************************************/
;;;508    void TIM1_UP_IRQHandler(void)
0000e6  4770              BX       lr
;;;509    {
;;;510    }
;;;511    
                          ENDP

                  TIM1_TRG_COM_IRQHandler PROC
;;;519    *******************************************************************************/
;;;520    void TIM1_TRG_COM_IRQHandler(void)
0000e8  4770              BX       lr
;;;521    {
;;;522    }
;;;523    
                          ENDP

                  TIM1_CC_IRQHandler PROC
;;;530    *******************************************************************************/
;;;531    void TIM1_CC_IRQHandler(void)
0000ea  4770              BX       lr
;;;532    {
;;;533    }
;;;534    
                          ENDP

                  TIM2_IRQHandler PROC
;;;541    *******************************************************************************/
;;;542    void TIM2_IRQHandler(void)
0000ec  b510              PUSH     {r4,lr}
;;;543    {
;;;544    	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)	//检测指定的中断是否发生
0000ee  2101              MOVS     r1,#1
0000f0  0788              LSLS     r0,r1,#30
0000f2  f7fffffe          BL       TIM_GetITStatus
0000f6  b140              CBZ      r0,|L1.266|
;;;545    	{
;;;546    		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);      //清除中断处理位
0000f8  2101              MOVS     r1,#1
0000fa  0788              LSLS     r0,r1,#30
0000fc  f7fffffe          BL       TIM_ClearITPendingBit
;;;547    		
;;;548    		//火花检测程序	
;;;549    		Spark_test();  //5ms检测进行一次火花检测
000100  f7fffffe          BL       Spark_test
;;;550    		Single_num = 0;//记录一次火花个数后，清零变量，重新开始时间单元的火花计数
000104  2000              MOVS     r0,#0
000106  4923              LDR      r1,|L1.404|
000108  6008              STR      r0,[r1,#0]  ; Single_num
                  |L1.266|
;;;551    	}
;;;552    }
00010a  bd10              POP      {r4,pc}
;;;553    
                          ENDP

                  TIM3_IRQHandler PROC
;;;560    *******************************************************************************/
;;;561    void TIM3_IRQHandler(void)
00010c  4770              BX       lr
;;;562    {
;;;563    }
;;;564    
                          ENDP

                  TIM4_IRQHandler PROC
;;;571    *******************************************************************************/
;;;572    void TIM4_IRQHandler(void)
00010e  4770              BX       lr
;;;573    {
;;;574    }
;;;575    
                          ENDP

                  I2C1_EV_IRQHandler PROC
;;;582    *******************************************************************************/
;;;583    void I2C1_EV_IRQHandler(void)
000110  4770              BX       lr
;;;584    {
;;;585    }
;;;586    
                          ENDP

                  I2C1_ER_IRQHandler PROC
;;;593    *******************************************************************************/
;;;594    void I2C1_ER_IRQHandler(void)
000112  4770              BX       lr
;;;595    {
;;;596    }
;;;597    
                          ENDP

                  I2C2_EV_IRQHandler PROC
;;;604    *******************************************************************************/
;;;605    void I2C2_EV_IRQHandler(void)
000114  4770              BX       lr
;;;606    {
;;;607    }
;;;608    
                          ENDP

                  I2C2_ER_IRQHandler PROC
;;;615    *******************************************************************************/
;;;616    void I2C2_ER_IRQHandler(void)
000116  4770              BX       lr
;;;617    {
;;;618    }
;;;619    
                          ENDP

                  SPI1_IRQHandler PROC
;;;626    *******************************************************************************/
;;;627    void SPI1_IRQHandler(void)
000118  4770              BX       lr
;;;628    {
;;;629    }
;;;630    
                          ENDP

                  SPI2_IRQHandler PROC
;;;637    *******************************************************************************/
;;;638    void SPI2_IRQHandler(void)
00011a  4770              BX       lr
;;;639    {
;;;640    }
;;;641    
                          ENDP

                  USART1_IRQHandler PROC
;;;648    *******************************************************************************/
;;;649    void USART1_IRQHandler(void)
00011c  4770              BX       lr
;;;650    {
;;;651    }
;;;652    
                          ENDP

                  USART2_IRQHandler PROC
;;;659    *******************************************************************************/
;;;660    void USART2_IRQHandler(void)
00011e  b510              PUSH     {r4,lr}
;;;661    {
;;;662       u8 Data = 0;
000120  2400              MOVS     r4,#0
;;;663    	
;;;664    	/*处理接受到的数据*/
;;;665    	if(USART_GetITStatus(USART2, USART_IT_RXNE) == SET)//判断是否接受到数据
000122  f2405125          MOV      r1,#0x525
000126  481c              LDR      r0,|L1.408|
000128  f7fffffe          BL       USART_GetITStatus
00012c  2801              CMP      r0,#1
00012e  d10b              BNE      |L1.328|
;;;666    	{
;;;667    		Data = USART_ReceiveData(USART2);//读取串口数据
000130  4819              LDR      r0,|L1.408|
000132  f7fffffe          BL       USART_ReceiveData
000136  b2c4              UXTB     r4,r0
;;;668    
;;;669    		switch(Data)
000138  2cff              CMP      r4,#0xff
00013a  d103              BNE      |L1.324|
;;;670    		{
;;;671    		
;;;672    			case 0xFF: RxFlagUSART2 = 5; break;
00013c  2005              MOVS     r0,#5
00013e  4917              LDR      r1,|L1.412|
000140  7008              STRB     r0,[r1,#0]
000142  e000              B        |L1.326|
                  |L1.324|
;;;673    			
;;;674    		    
;;;675    			default:break;
000144  bf00              NOP      
                  |L1.326|
000146  bf00              NOP                            ;672
                  |L1.328|
;;;676    		}
;;;677    	}
;;;678    
;;;679    	if(USART_GetITStatus(USART2,USART_IT_RXNE) != RESET)//清除接受中断标志位
000148  f2405125          MOV      r1,#0x525
00014c  4812              LDR      r0,|L1.408|
00014e  f7fffffe          BL       USART_GetITStatus
000152  b120              CBZ      r0,|L1.350|
;;;680    	{
;;;681    		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000154  f2405125          MOV      r1,#0x525
000158  480f              LDR      r0,|L1.408|
00015a  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.350|
;;;682    	}
;;;683    
;;;684    
;;;685    }
00015e  bd10              POP      {r4,pc}
;;;686    
                          ENDP

                  USART3_IRQHandler PROC
;;;693    *******************************************************************************/
;;;694    void USART3_IRQHandler(void)
000160  4770              BX       lr
;;;695    {
;;;696    }
;;;697    
                          ENDP

                  EXTI15_10_IRQHandler PROC
;;;704    *******************************************************************************/
;;;705    void EXTI15_10_IRQHandler(void)
000162  4770              BX       lr
;;;706    {
;;;707    }
;;;708    
                          ENDP

                  RTCAlarm_IRQHandler PROC
;;;715    *******************************************************************************/
;;;716    void RTCAlarm_IRQHandler(void)
000164  4770              BX       lr
;;;717    {
;;;718    }
;;;719    
                          ENDP

                  USBWakeUp_IRQHandler PROC
;;;726    *******************************************************************************/
;;;727    void USBWakeUp_IRQHandler(void)
000166  4770              BX       lr
;;;728    {
;;;729    }
;;;730    
                          ENDP

                  TIM8_BRK_IRQHandler PROC
;;;737    *******************************************************************************/
;;;738    void TIM8_BRK_IRQHandler(void)
000168  4770              BX       lr
;;;739    {
;;;740    }
;;;741    
                          ENDP

                  TIM8_UP_IRQHandler PROC
;;;749    *******************************************************************************/
;;;750    void TIM8_UP_IRQHandler(void)
00016a  4770              BX       lr
;;;751    {
;;;752    }
;;;753    
                          ENDP

                  TIM8_TRG_COM_IRQHandler PROC
;;;761    *******************************************************************************/
;;;762    void TIM8_TRG_COM_IRQHandler(void)
00016c  4770              BX       lr
;;;763    {
;;;764    }
;;;765    
                          ENDP

                  TIM8_CC_IRQHandler PROC
;;;772    *******************************************************************************/
;;;773    void TIM8_CC_IRQHandler(void)
00016e  4770              BX       lr
;;;774    {
;;;775    }
;;;776    
                          ENDP

                  ADC3_IRQHandler PROC
;;;783    *******************************************************************************/
;;;784    void ADC3_IRQHandler(void)
000170  4770              BX       lr
;;;785    {
;;;786    }
;;;787    
                          ENDP

                  FSMC_IRQHandler PROC
;;;794    *******************************************************************************/
;;;795    void FSMC_IRQHandler(void)
000172  4770              BX       lr
;;;796    {
;;;797    }
;;;798    
                          ENDP

                  SDIO_IRQHandler PROC
;;;805    *******************************************************************************/
;;;806    void SDIO_IRQHandler(void)
000174  4770              BX       lr
;;;807    {
;;;808    }
;;;809    
                          ENDP

                  TIM5_IRQHandler PROC
;;;816    *******************************************************************************/
;;;817    void TIM5_IRQHandler(void)
000176  4770              BX       lr
;;;818    {
;;;819    }
;;;820    
                          ENDP

                  SPI3_IRQHandler PROC
;;;827    *******************************************************************************/
;;;828    void SPI3_IRQHandler(void)
000178  4770              BX       lr
;;;829    {
;;;830    }
;;;831    
                          ENDP

                  UART4_IRQHandler PROC
;;;838    *******************************************************************************/
;;;839    void UART4_IRQHandler(void)
00017a  4770              BX       lr
;;;840    {
;;;841    }
;;;842    
                          ENDP

                  UART5_IRQHandler PROC
;;;849    *******************************************************************************/
;;;850    void UART5_IRQHandler(void)
00017c  4770              BX       lr
;;;851    {
;;;852    }
;;;853    
                          ENDP

                  TIM6_IRQHandler PROC
;;;860    *******************************************************************************/
;;;861    void TIM6_IRQHandler(void)
00017e  4770              BX       lr
;;;862    {
;;;863    }
;;;864    
                          ENDP

                  TIM7_IRQHandler PROC
;;;871    *******************************************************************************/
;;;872    void TIM7_IRQHandler(void)
000180  4770              BX       lr
;;;873    {
;;;874    }
;;;875    
                          ENDP

                  DMA2_Channel1_IRQHandler PROC
;;;882    *******************************************************************************/
;;;883    void DMA2_Channel1_IRQHandler(void)
000182  4770              BX       lr
;;;884    {
;;;885    }
;;;886    
                          ENDP

                  DMA2_Channel2_IRQHandler PROC
;;;893    *******************************************************************************/
;;;894    void DMA2_Channel2_IRQHandler(void)
000184  4770              BX       lr
;;;895    {
;;;896    }
;;;897    
                          ENDP

                  DMA2_Channel3_IRQHandler PROC
;;;904    *******************************************************************************/
;;;905    void DMA2_Channel3_IRQHandler(void)
000186  4770              BX       lr
;;;906    {
;;;907    }
;;;908    
                          ENDP

                  DMA2_Channel4_5_IRQHandler PROC
;;;916    *******************************************************************************/
;;;917    void DMA2_Channel4_5_IRQHandler(void)
000188  4770              BX       lr
;;;918    {
;;;919    }
;;;920    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
                          DCD      TimeDisplay
                  |L1.400|
                          DCD      0x00015180
                  |L1.404|
                          DCD      Single_num
                  |L1.408|
                          DCD      0x40004400
                  |L1.412|
                          DCD      RxFlagUSART2
